"use strict";
/*
 * SonarQube JavaScript Plugin
 * Copyright (C) 2011-2024 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
// https://sonarsource.github.io/rspec/#/rspec/S3785/javascript
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.rule = void 0;
const typescript_1 = __importDefault(require("typescript"));
const index_js_1 = require("../helpers/index.js");
const meta_js_1 = require("./meta.js");
exports.rule = {
    meta: (0, index_js_1.generateMeta)(meta_js_1.meta, undefined, true),
    create(context) {
        const services = context.sourceCode.parserServices;
        if (!(0, index_js_1.isRequiredParserServices)(services)) {
            return {};
        }
        function isPrimitive(node) {
            const type = (0, index_js_1.getTypeFromTreeNode)(node, services);
            return ((type.flags & typescript_1.default.TypeFlags.StringLike) !== 0 ||
                (type.flags & typescript_1.default.TypeFlags.NumberLike) !== 0 ||
                (type.flags & typescript_1.default.TypeFlags.BooleanLike) !== 0 ||
                (type.flags & typescript_1.default.TypeFlags.Null) !== 0 ||
                (type.flags & typescript_1.default.TypeFlags.Undefined) !== 0);
        }
        return {
            'BinaryExpression[operator="in"]': (node) => {
                const { left, right, operator } = node;
                if (isPrimitive(right)) {
                    const opToken = context.sourceCode
                        .getTokensBetween(left, right)
                        .find(token => token.type === 'Keyword' && token.value === operator);
                    (0, index_js_1.report)(context, {
                        message: 'TypeError can be thrown as this operand might have primitive type.',
                        node: right,
                    }, [(0, index_js_1.toSecondaryLocation)(opToken)]);
                }
            },
        };
    },
};
