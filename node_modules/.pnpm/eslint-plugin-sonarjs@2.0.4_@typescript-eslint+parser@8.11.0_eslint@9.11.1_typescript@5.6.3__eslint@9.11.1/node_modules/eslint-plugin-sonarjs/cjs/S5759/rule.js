"use strict";
/*
 * SonarQube JavaScript Plugin
 * Copyright (C) 2011-2024 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
// https://sonarsource.github.io/rspec/#/rspec/S5759/javascript
Object.defineProperty(exports, "__esModule", { value: true });
exports.rule = void 0;
const index_js_1 = require("../helpers/index.js");
const meta_js_1 = require("./meta.js");
exports.rule = {
    meta: (0, index_js_1.generateMeta)(meta_js_1.meta, undefined, true),
    create(context) {
        return {
            CallExpression(node) {
                const call = node;
                const { callee, arguments: args } = call;
                if (isSensitiveFQN(context, call) && args.length > 0) {
                    const xfwdProp = (0, index_js_1.getProperty)(args[0], 'xfwd', context);
                    if (!xfwdProp) {
                        return;
                    }
                    const xfwdValue = (0, index_js_1.getValueOfExpression)(context, xfwdProp.value, 'Literal');
                    if (xfwdValue?.value === true) {
                        (0, index_js_1.report)(context, {
                            node: callee,
                            message: 'Make sure forwarding client IP address is safe here.',
                        }, [(0, index_js_1.toSecondaryLocation)(xfwdProp)]);
                    }
                }
            },
        };
    },
};
function isSensitiveFQN(context, call) {
    const fqn = (0, index_js_1.getFullyQualifiedName)(context, call);
    return (fqn &&
        ['http-proxy.createProxyServer', 'http-proxy-middleware.createProxyMiddleware'].includes(fqn));
}
