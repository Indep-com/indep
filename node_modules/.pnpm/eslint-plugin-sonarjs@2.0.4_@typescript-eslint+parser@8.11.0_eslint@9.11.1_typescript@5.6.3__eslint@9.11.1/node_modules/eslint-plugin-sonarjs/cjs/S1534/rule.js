"use strict";
/*
 * SonarQube JavaScript Plugin
 * Copyright (C) 2011-2024 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
// https://sonarsource.github.io/rspec/#/rspec/S1534/javascript
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.rule = void 0;
const index_js_1 = require("../core/index.js");
const index_js_2 = require("../typescript-eslint/index.js");
const eslint_plugin_react_1 = __importDefault(require("eslint-plugin-react"));
const { rules: reactRules } = eslint_plugin_react_1.default;
const index_js_3 = require("../helpers/index.js");
const decorator_js_1 = require("./decorator.js");
const meta_js_1 = require("./meta.js");
const noDupeKeysRule = (0, decorator_js_1.decorate)(index_js_1.eslintRules['no-dupe-keys']);
const noDupeClassMembersRule = index_js_2.tsEslintRules['no-dupe-class-members'];
const jsxNoDuplicatePropsRule = reactRules['jsx-no-duplicate-props'];
exports.rule = {
    meta: (0, index_js_3.generateMeta)(meta_js_1.meta, {
        hasSuggestions: true,
        messages: {
            ...noDupeKeysRule.meta.messages,
            ...noDupeClassMembersRule.meta.messages,
            ...jsxNoDuplicatePropsRule.meta.messages,
        },
        schema: jsxNoDuplicatePropsRule.schema, // the other 2 rules have no options
    }),
    create(context) {
        const noDupeKeysListener = noDupeKeysRule.create(context);
        const noDupeClassMembersListener = noDupeClassMembersRule.create(context);
        const jsxNoDuplicatePropsListener = jsxNoDuplicatePropsRule.create(context);
        return (0, index_js_3.mergeRules)(noDupeKeysListener, noDupeClassMembersListener, jsxNoDuplicatePropsListener);
    },
};
